name: Snyk Security

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  snyk:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # for actions/checkout to fetch code
      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read  # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      # Checkout the code from the repository
      - uses: actions/checkout@v4

      # Install GitHub CLI (gh)
      - name: Install GitHub CLI
        run: sudo apt-get install gh

      # Step to generate SBOM with CycloneDX
      - name: Install CycloneDX CLI
        run: |
          pip install cyclonedx-bom

      - name: Generate SBOM with CycloneDX
        run: |
          cyclonedx-py requirements requirements_gpu.txt -o sbom_gpu.json
          cyclonedx-py requirements requirements_cpu.txt -o sbom_cpu.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

      # Install Snyk CLI manually
      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements_cpu.txt
          pip install -r requirements_gpu.txt

      # Run Snyk Open Source (SCA) test for requirements_cpu.txt
      - name: Run Snyk Open Source (SCA) test for requirements_cpu.txt
        run: snyk test --file=requirements_cpu.txt --package-manager=pip --json > snyk-results.json

      # Run Snyk Open Source (SCA) test for requirements_gpu.txt
      - name: Run Snyk Open Source (SCA) test for requirements_gpu.txt
        run: snyk test --file=requirements_gpu.txt --package-manager=pip --json >> snyk-results.json

      # Check for critical/high vulnerabilities
      - name: Check for critical/high vulnerabilities
        id: check-vulnerabilities
        run: |
          CRITICAL=$(jq '.vulnerabilities | map(select(.severity == "high" or .severity == "critical")) | length' snyk-results.json)
          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical or High vulnerabilities detected. Creating PR for dependency update."
          else
            echo "No critical or high vulnerabilities detected."
            exit 0
          fi

      # Update dependencies and create PR if vulnerabilities are found
      - name: Update dependencies and create PR
        if: success() && steps.check-vulnerabilities.outputs.CRITICAL != '0'
        run: |
          # Create a new branch for the update
          git checkout -b update-dependencies

          # Run Snyk wizard to automatically fix dependencies (or manually update the affected ones)
          snyk wizard --file=requirements_cpu.txt --all-projects
          snyk wizard --file=requirements_gpu.txt --all-projects

          # Commit the changes (dependency updates)
          git add requirements_cpu.txt requirements_gpu.txt
          git commit -m "Automated update for critical/high vulnerabilities"

          # Push changes to the new branch
          git push origin update-dependencies

          # Create a pull request using GitHub CLI
          gh pr create --title "Automated Dependency Update" --body "This PR includes updates for dependencies with critical/high vulnerabilities." --base master --head update-dependencies --label "security"
      
      # Run Snyk Code to check for vulnerabilities and upload results to GitHub Security tab
      - name: Run Snyk Code to check for vulnerabilities
        run: snyk code test --sarif || exit 1

      # Monitor the project for Snyk Open Source vulnerabilities
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

      # Run Snyk IaC (Infrastructure as Code) test and report
      - name: Snyk IaC test and report
        run: snyk iac test --report || true

      # Build a Docker image (if applicable)
      - name: Build a Docker image
        run: docker build -t your/image-to-test .

      # Run Snyk Container analysis and monitor the Docker image
      - name: Snyk Container monitor
        run: snyk container monitor your/image-to-test --file=Dockerfile

      # Upload the Snyk Code results into GitHub Code Scanning tab (SARIF format)
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  